// <auto-generated />
using System;
using Frags.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Frags.Database.Migrations
{
    [DbContext(typeof(RpgContext))]
    [Migration("20190501165212_Campaigns")]
    partial class Campaigns
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.2-servicing-10034");

            modelBuilder.Entity("Frags.Core.Statistics.Statistic", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Aliases");

                    b.Property<int?>("CampaignDtoId");

                    b.Property<string>("Description");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Name");

                    b.HasKey("Id");

                    b.HasIndex("CampaignDtoId");

                    b.ToTable("Statistics");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Statistic");
                });

            modelBuilder.Entity("Frags.Core.Statistics.StatisticMapping", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CharacterDtoId");

                    b.Property<int?>("EffectDtoId");

                    b.Property<int?>("StatisticId");

                    b.Property<int?>("StatisticValueId");

                    b.HasKey("Id");

                    b.HasIndex("CharacterDtoId");

                    b.HasIndex("EffectDtoId");

                    b.HasIndex("StatisticId");

                    b.HasIndex("StatisticValueId");

                    b.ToTable("StatisticMapping");
                });

            modelBuilder.Entity("Frags.Core.Statistics.StatisticValue", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("IsProficient");

                    b.Property<double>("Proficiency");

                    b.Property<int>("Value");

                    b.HasKey("Id");

                    b.ToTable("StatisticValue");
                });

            modelBuilder.Entity("Frags.Database.Campaigns.CampaignDto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<ulong>("OwnerUserIdentifier");

                    b.Property<int?>("RollOptionsId");

                    b.Property<int?>("StatisticOptionsId");

                    b.HasKey("Id");

                    b.HasIndex("RollOptionsId");

                    b.HasIndex("StatisticOptionsId");

                    b.ToTable("Campaigns");
                });

            modelBuilder.Entity("Frags.Database.Campaigns.Moderator", b =>
                {
                    b.Property<int>("UserId");

                    b.Property<int>("CampaignId");

                    b.HasKey("UserId", "CampaignId");

                    b.HasIndex("CampaignId");

                    b.ToTable("Moderator");
                });

            modelBuilder.Entity("Frags.Database.Characters.CharacterDto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Active");

                    b.Property<int>("AttributePoints");

                    b.Property<int?>("CampaignDtoId");

                    b.Property<string>("Description");

                    b.Property<int>("Experience");

                    b.Property<int>("Money");

                    b.Property<string>("Name");

                    b.Property<int>("SkillPoints");

                    b.Property<string>("Story");

                    b.Property<ulong>("UserIdentifier");

                    b.HasKey("Id");

                    b.HasIndex("CampaignDtoId");

                    b.ToTable("Characters");
                });

            modelBuilder.Entity("Frags.Database.Characters.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ActiveCharacterId");

                    b.Property<ulong>("UserIdentifier");

                    b.HasKey("Id");

                    b.HasIndex("ActiveCharacterId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Frags.Database.Effects.EffectDto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CampaignDtoId");

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.Property<ulong>("OwnerUserIdentifier");

                    b.HasKey("Id");

                    b.HasIndex("CampaignDtoId");

                    b.ToTable("Effects");
                });

            modelBuilder.Entity("Frags.Database.Effects.EffectMapping", b =>
                {
                    b.Property<int>("EffectId");

                    b.Property<int>("CharacterId");

                    b.HasKey("EffectId", "CharacterId");

                    b.HasIndex("CharacterId");

                    b.ToTable("EffectMapping");
                });

            modelBuilder.Entity("Frags.Database.Statistics.ChannelDto", b =>
                {
                    b.Property<ulong>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("CampaignDtoId");

                    b.Property<int?>("StatisticOptionsDtoId");

                    b.HasKey("Id");

                    b.HasIndex("CampaignDtoId");

                    b.HasIndex("StatisticOptionsDtoId");

                    b.ToTable("ChannelDto");
                });

            modelBuilder.Entity("Frags.Database.Statistics.RollOptionsDto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("RollStrategy");

                    b.HasKey("Id");

                    b.ToTable("RollOptionsDto");
                });

            modelBuilder.Entity("Frags.Database.Statistics.StatisticOptionsDto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AttributeMax");

                    b.Property<int>("AttributePointsOnLevelUp");

                    b.Property<int>("ExpMessageLengthDivisor");

                    b.Property<int>("InitialAttributeMax");

                    b.Property<int>("InitialAttributeMin");

                    b.Property<int>("InitialAttributePoints");

                    b.Property<int>("InitialAttributesAtMax");

                    b.Property<int>("InitialAttributesProficient");

                    b.Property<int>("InitialSetupMaxLevel");

                    b.Property<int>("InitialSkillMax");

                    b.Property<int>("InitialSkillMin");

                    b.Property<int>("InitialSkillPoints");

                    b.Property<int>("InitialSkillsAtMax");

                    b.Property<int>("InitialSkillsProficient");

                    b.Property<double>("ProficientAttributeMultiplier");

                    b.Property<double>("ProficientSkillMultiplier");

                    b.Property<string>("ProgressionStrategy");

                    b.Property<int>("SkillMax");

                    b.Property<int>("SkillPointsOnLevelUp");

                    b.HasKey("Id");

                    b.ToTable("StatisticOptionsDto");
                });

            modelBuilder.Entity("Frags.Core.Statistics.Attribute", b =>
                {
                    b.HasBaseType("Frags.Core.Statistics.Statistic");

                    b.HasDiscriminator().HasValue("Attribute");
                });

            modelBuilder.Entity("Frags.Core.Statistics.Skill", b =>
                {
                    b.HasBaseType("Frags.Core.Statistics.Statistic");

                    b.Property<int?>("AttributeId");

                    b.Property<int>("MinimumValue");

                    b.HasIndex("AttributeId");

                    b.HasDiscriminator().HasValue("Skill");
                });

            modelBuilder.Entity("Frags.Core.Statistics.Statistic", b =>
                {
                    b.HasOne("Frags.Database.Campaigns.CampaignDto")
                        .WithMany("Statistics")
                        .HasForeignKey("CampaignDtoId");
                });

            modelBuilder.Entity("Frags.Core.Statistics.StatisticMapping", b =>
                {
                    b.HasOne("Frags.Database.Characters.CharacterDto")
                        .WithMany("Statistics")
                        .HasForeignKey("CharacterDtoId");

                    b.HasOne("Frags.Database.Effects.EffectDto")
                        .WithMany("StatisticEffects")
                        .HasForeignKey("EffectDtoId");

                    b.HasOne("Frags.Core.Statistics.Statistic", "Statistic")
                        .WithMany()
                        .HasForeignKey("StatisticId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Frags.Core.Statistics.StatisticValue", "StatisticValue")
                        .WithMany()
                        .HasForeignKey("StatisticValueId");
                });

            modelBuilder.Entity("Frags.Database.Campaigns.CampaignDto", b =>
                {
                    b.HasOne("Frags.Database.Statistics.RollOptionsDto", "RollOptions")
                        .WithMany()
                        .HasForeignKey("RollOptionsId");

                    b.HasOne("Frags.Database.Statistics.StatisticOptionsDto", "StatisticOptions")
                        .WithMany()
                        .HasForeignKey("StatisticOptionsId");
                });

            modelBuilder.Entity("Frags.Database.Campaigns.Moderator", b =>
                {
                    b.HasOne("Frags.Database.Campaigns.CampaignDto", "Campaign")
                        .WithMany("Moderators")
                        .HasForeignKey("CampaignId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Frags.Database.Characters.User", "User")
                        .WithMany("ModeratedCampaigns")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Frags.Database.Characters.CharacterDto", b =>
                {
                    b.HasOne("Frags.Database.Campaigns.CampaignDto")
                        .WithMany("Characters")
                        .HasForeignKey("CampaignDtoId");
                });

            modelBuilder.Entity("Frags.Database.Characters.User", b =>
                {
                    b.HasOne("Frags.Database.Characters.CharacterDto", "ActiveCharacter")
                        .WithMany()
                        .HasForeignKey("ActiveCharacterId");
                });

            modelBuilder.Entity("Frags.Database.Effects.EffectDto", b =>
                {
                    b.HasOne("Frags.Database.Campaigns.CampaignDto")
                        .WithMany("Effects")
                        .HasForeignKey("CampaignDtoId");
                });

            modelBuilder.Entity("Frags.Database.Effects.EffectMapping", b =>
                {
                    b.HasOne("Frags.Database.Characters.CharacterDto", "Character")
                        .WithMany("EffectMappings")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Frags.Database.Effects.EffectDto", "Effect")
                        .WithMany("EffectMappings")
                        .HasForeignKey("EffectId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Frags.Database.Statistics.ChannelDto", b =>
                {
                    b.HasOne("Frags.Database.Campaigns.CampaignDto")
                        .WithMany("Channels")
                        .HasForeignKey("CampaignDtoId");

                    b.HasOne("Frags.Database.Statistics.StatisticOptionsDto")
                        .WithMany("ExpEnabledChannels")
                        .HasForeignKey("StatisticOptionsDtoId");
                });

            modelBuilder.Entity("Frags.Core.Statistics.Skill", b =>
                {
                    b.HasOne("Frags.Core.Statistics.Attribute", "Attribute")
                        .WithMany()
                        .HasForeignKey("AttributeId");
                });
#pragma warning restore 612, 618
        }
    }
}
